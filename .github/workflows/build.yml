#!/bin/bash

# تأكد من أن المستخدم root
if [ "$(id -u)" != "0" ]; then
   echo "هذا السكربت يتطلب صلاحيات root. الرجاء التشغيل باستخدام sudo." 
   exit 1
fi

# تثبيت التبعيات المطلوبة
echo "جاري تثبيت التبعيات المطلوبة..."
apt update && apt install -y \
    bc bison build-essential clang flex git libncurses-dev \
    libssl-dev lld llvm llvm-tools python3 unzip wget xz-utils \
    android-sdk-libsparse-utils android-sdk-ext4-utils

# إنشاء مجلد العمل
WORK_DIR="kernel_build"
mkdir -p $WORK_DIR
cd $WORK_DIR || exit

# 1. استنساخ مصدر Kernel
echo "جاري استنساخ مصدر Kernel..."
git clone --depth=1 https://github.com/usama19931993/exynos990-kernel1.git kernel
cd kernel || exit

# 2. دمج KernelSU
echo "جاري دمج KernelSU..."
git clone --depth=1 https://github.com/tiann/KernelSU.git
if [ ! -d "KernelSU" ]; then
   echo "❌ فشل في استنساخ KernelSU"
   exit 1
fi

# تكامل KernelSU مع Kernel
rm -rf KernelSU/.git
cp -rvf KernelSU/* .
mkdir -p drivers/kernelsu
cp -r KernelSU/kernel/* drivers/kernelsu/
echo 'obj-y += kernelsu/' >> drivers/Makefile
echo 'source "drivers/kernelsu/Kconfig"' >> drivers/Kconfig

# 3. تهيئة Kernel
echo "جاري تهيئة Kernel..."
make ARCH=arm64 extreme_z3s_defconfig
yes "" | make ARCH=arm64 olddefconfig

# 4. بناء Kernel
echo "جاري بناء Kernel (قد تستغرق هذه العملية وقتًا)..."
make -j$(nproc) ARCH=arm64 \
    CC=clang \
    CLANG_TRIPLE=aarch64-linux-gnu- \
    CROSS_COMPILE=aarch64-linux-gnu- \
    LD=ld.lld \
    LLVM=1 \
    LLVM_IAS=1

# التحقق من نجاح البناء
if [ ! -f "arch/arm64/boot/Image" ]; then
    echo "❌ فشل بناء Kernel"
    exit 1
fi

# 5. تحضير boot.img
echo "جاري تحضير boot.img..."
cd ..
wget https://github.com/topjohnwu/Magisk/releases/latest/download/magiskboot -O magiskboot
chmod +x magiskboot

# استخراج boot.img الأصلي
wget https://github.com/usama19931993/exynos990-kernel1/releases/download/boot-original/boot-original.zip
unzip boot-original.zip

# تعديل boot.img
echo "جاري تعديل boot.img مع Kernel الجديد..."
./magiskboot unpack boot.img
cp kernel/arch/arm64/boot/Image kernel
./magiskboot repack boot.img

# التحقق من الناتج
if [ ! -f "new-boot.img" ]; then
    echo "❌ فشل في إنشاء boot.img جديد"
    exit 1
fi

mv new-boot.img modified_boot.img

echo "✅ تم الانتهاء بنجاح!"
echo "يمكنك العثور على boot.img المعدل في: $(pwd)/modified_boot.img"
echo "لرفعه إلى الجهاز استخدم:"
echo "adb push modified_boot.img /sdcard/"
echo "ثم flashه باستخدام:"
echo "fastboot flash boot /sdcard/modified_boot.img"