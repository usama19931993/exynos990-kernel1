name: Build Kernel for SM-G988B (Exynos990)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Clean workspace
      run: rm -rf kernel boot-original

    - name: Install toolchain and dependencies
      run: |
        sudo apt update
        sudo apt install -y \
          bc bison build-essential clang-14 flex git \
          libncurses-dev libssl-dev lld-14 llvm-14 llvm-14-tools \
          python3 unzip wget xz-utils
        sudo ln -sf /usr/bin/llvm-ar-14 /usr/bin/llvm-ar
        sudo ln -sf /usr/bin/llvm-objdump-14 /usr/bin/llvm-objdump
        echo "PATH=/usr/lib/llvm-14/bin:$PATH" >> $GITHUB_ENV

    - name: Download original boot.img
      run: |
        mkdir -p boot-original
        wget --header="Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
             -O boot-original/boot.zip \
             https://github.com/usama19931993/exynos990-kernel1/releases/download/boot/boot-original.zip
        unzip -o boot-original/boot.zip -d boot-original

    - name: Clone and prepare kernel
      run: |
        git clone --depth=1 https://github.com/usama19931993/exynos990-kernel1.git kernel
        cd kernel
        git clone --depth=1 https://github.com/tiann/KernelSU.git
        mv KernelSU/kernel drivers/kernelsu
        echo 'source "drivers/kernelsu/Kconfig"' >> drivers/Kconfig
        cp ../boot-original/boot.img .
        mkdir -p out

    - name: Configure kernel
      run: |
        cd kernel
        make O=out ARCH=arm64 extreme_z3s_defconfig

        ./scripts/config --file out/.config \
          --set-val CONFIG_MALI_BIFROST y \
          --set-val CONFIG_MALI_BIFROST_R38P1 n \
          --set-val CONFIG_MALI_PLATFORM_NAME "exynos"

        make O=out ARCH=arm64 olddefconfig

    - name: Build kernel
      run: |
        cd kernel
        make -j$(nproc) O=out ARCH=arm64 \
          CC=clang-14 \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE=aarch64-linux-gnu- \
          LD=ld.lld-14 \
          LLVM=1 \
          LLVM_IAS=1 \
          KCFLAGS="-Wno-error -march=armv8.2-a"

    - name: Package boot.img
      run: |
        cd kernel
        bash ./mkbootimg.sh

    - name: Create Odin flashable boot.tar.md5
      run: |
        cd kernel
        tar -H ustar -c boot.img > boot.tar
        md5sum -t boot.tar | awk '{print $1}' >> boot.tar
        mv boot.tar boot.tar.md5

    - name: Upload result
      uses: actions/upload-artifact@v4
      with:
        name: boot.tar.md5
        path: kernel/boot.tar.md5