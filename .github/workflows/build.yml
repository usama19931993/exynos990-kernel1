name: Build Complete Boot Image for SM-G988B (Exynos990)

on:
  workflow_dispatch:
    inputs:
      ksu_version:
        description: 'KernelSU version/tag (e.g. v0.6.6)'
        required: false
        default: 'v0.6.6'
      clean_build:
        description: 'Force clean build (will delete existing kernel directory)'
        required: false
        default: 'false'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    env:
      KERNEL_DIR: kernel
      OUT_DIR: out
      BOOT_ORIGINAL_URL: "https://github.com/usama19931993/exynos990-kernel1/releases/download/boot-original/boot-original.zip"

    steps:
    - name: Checkout source
      uses: actions/checkout@v4

    - name: Clean workspace
      run: |
        if [ "${{ inputs.clean_build }}" = "true" ]; then
          echo "Performing clean build - removing kernel directory"
          rm -rf $KERNEL_DIR
        fi
        rm -rf Image $OUT_DIR boot.img new-boot.img boot-original*
        mkdir -p $KERNEL_DIR

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y \
          bc bison build-essential clang-14 flex git libncurses-dev \
          libssl-dev lld-14 llvm-14 llvm-14-tools python3 unzip wget xz-utils \
          device-tree-compiler kmod libelf-dev ccache android-sdk-libsparse-utils

    - name: Setup environment
      run: |
        sudo ln -sf /usr/bin/llvm-ar-14 /usr/bin/llvm-ar
        sudo ln -sf /usr/bin/llvm-objdump-14 /usr/bin/llvm-objdump
        echo "PATH=/usr/lib/llvm-14/bin:$PATH" >> $GITHUB_ENV
        ccache --max-size=2G

    - name: Clone kernel source (with retry)
      run: |
        if [ ! -d "$KERNEL_DIR/.git" ]; then
          echo "Cloning fresh kernel repository"
          git clone --depth=1 https://github.com/usama19931993/exynos990-kernel1.git $KERNEL_DIR
        else
          echo "Using existing kernel repository"
          cd $KERNEL_DIR
          git fetch --depth=1
          git reset --hard origin/$(git rev-parse --abbrev-ref HEAD)
        fi

    - name: Setup KernelSU
      run: |
        cd $KERNEL_DIR
        
        # Clean existing KernelSU if exists
        [ -d "kernelSU" ] && rm -rf kernelSU || true
        [ -d "drivers/kernelsu" ] && rm -rf drivers/kernelsu || true
        
        # Clone KernelSU with version check
        git clone --depth=1 https://github.com/tiann/KernelSU.git kernelSU
        cd kernelSU
        
        # Verify version exists
        if ! git rev-parse --verify --quiet refs/tags/${{ inputs.ksu_version }}; then
          echo "::error::Requested KernelSU version (${{ inputs.ksu_version }}) not found!"
          echo "Available versions:"
          git tag -l | sort -V | tail -n 10
          exit 1
        fi
        
        git checkout tags/${{ inputs.ksu_version }} -b ksu-${{ inputs.ksu_version }}
        cd ..
        
        # Copy KernelSU files
        mkdir -p drivers/kernelsu
        cp -r kernelSU/kernel/* drivers/kernelsu/
        
        # Configure KernelSU
        echo 'obj-y += kernelsu/' >> drivers/Makefile
        echo 'source "drivers/kernelsu/Kconfig"' >> drivers/Kconfig
        
        # Clean up
        rm -rf kernelSU

    - name: Apply KernelSU patches
      run: |
        cd $KERNEL_DIR/drivers/kernelsu
        
        # Apply common fixes
        find . -name "*.c" -exec sed -i '/MODULE_IMPORT_NS(VFS_internal_I_am_really_a_filesystem_and_am_NOT_a_driver)/d' {} +
        
        # Set version info
        KSU_VERSION=${{ inputs.ksu_version }}
        sed -i "s/#define KSU_GIT_VERSION.*/#define KSU_GIT_VERSION \"$KSU_VERSION\"/" ksu.h

    - name: Configure kernel
      run: |
        cd $KERNEL_DIR
        make O=$OUT_DIR ARCH=arm64 extreme_z3s_defconfig
        ./scripts/config --file $OUT_DIR/.config \
          --enable CONFIG_KSU \
          --set-val CONFIG_MALI_BIFROST y \
          --set-val CONFIG_MALI_BIFROST_R38P1 n \
          --set-val CONFIG_MALI_PLATFORM_NAME "exynos"
        make O=$OUT_DIR ARCH=arm64 olddefconfig

    - name: Build kernel
      run: |
        cd $KERNEL_DIR
        set -o pipefail
        make -j$(($(nproc)+1)) O=$OUT_DIR ARCH=arm64 \
          CC="ccache clang-14" \
          CLANG_TRIPLE=aarch64-linux-gnu-