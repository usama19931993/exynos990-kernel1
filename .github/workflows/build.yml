name: Build Exynos990 Kernel with KernelSU

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout source
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y git zip unzip curl wget bc bison flex build-essential \
          libssl-dev libncurses5-dev libncursesw5-dev clang python3 python3-pip \
          gcc libc6-dev lib32ncurses5-dev lib32z1-dev lib32stdc++6

    - name: Clone toolchain
      run: |
        mkdir toolchain
        git clone --depth=1 https://github.com/mvaisakh/gcc-arm64 toolchain/arm64
        git clone --depth=1 https://github.com/mvaisakh/gcc-arm toolchain/arm

    - name: Export environment variables
      run: |
        export ARCH=arm64
        export SUBARCH=arm64
        export CROSS_COMPILE=$(pwd)/toolchain/arm64/bin/aarch64-elf-
        export CROSS_COMPILE_ARM32=$(pwd)/toolchain/arm/bin/arm-eabi-
        echo "ARCH=arm64" >> $GITHUB_ENV
        echo "SUBARCH=arm64" >> $GITHUB_ENV
        echo "CROSS_COMPILE=$(pwd)/toolchain/arm64/bin/aarch64-elf-" >> $GITHUB_ENV
        echo "CROSS_COMPILE_ARM32=$(pwd)/toolchain/arm/bin/arm-eabi-" >> $GITHUB_ENV

    - name: Clone KernelSU
      run: |
        git clone --depth=1 https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/KernelSU/KernelSU kernel/kernelSU

    - name: Prepare KernelSU
      run: |
        cd kernel
        KSU_VERSION=$(cat kernelSU/VERSION_KSU)
        echo "KERNELSU_VERSION=$KSU_VERSION" >> $GITHUB_ENV
        echo "CONFIG_KSU=y" >> kernel/configs/exynos990_defconfig

    - name: Download original boot image
      run: |
        mkdir -p boot-original
        wget --header="Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
             -O boot-original/boot.zip \
             https://github.com/usama19931993/exynos990-kernel1/releases/download/boot-original/boot-original.zip
        unzip -o boot-original/boot.zip -d boot-original

    - name: Build Kernel
      run: |
        make -j$(nproc) O=out ARCH=arm64 exynos990_defconfig
        make -j$(nproc) O=out ARCH=arm64

    - name: Copy Image to anykernel
      run: |
        mkdir -p anykernel
        cp out/arch/arm64/boot/Image anykernel/

    - name: Merge with original boot.img
      run: |
        curl -Lo magiskboot https://github.com/topjohnwu/magiskboot/releases/latest/download/magiskboot-linux-x86_64
        chmod +x magiskboot
        ./magiskboot unpack boot-original/boot.img
        cp out/arch/arm64/boot/Image kernel
        ./magiskboot repack boot-original/boot.img
        mv new-boot.img boot_patched.img

    - name: Package for Odin (boot.tar.md5)
      run: |
        tar -H ustar -c boot_patched.img > boot.tar
        md5sum -t boot.tar | sed 's/ .*/ /' >> boot.tar
        mv boot.tar boot.tar.md5

    - name: Upload boot.tar.md5
      uses: actions/upload-artifact@v4
      with:
        name: boot-patched-odin
        path: boot.tar.md5