name: Build Kernel Image for SM-G988B (Exynos990)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
    - name: Checkout source
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'  # تمكين submodules

    - name: Clean workspace
      run: |
        rm -rf kernel Image out

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y \
          bc bison build-essential clang-14 flex git libncurses-dev \
          libssl-dev lld-14 llvm-14 llvm-14-tools python3 unzip wget xz-utils \
          device-tree-compiler kmod libelf-dev

    - name: Setup toolchain
      run: |
        sudo ln -sf /usr/bin/llvm-ar-14 /usr/bin/llvm-ar
        sudo ln -sf /usr/bin/llvm-objdump-14 /usr/bin/llvm-objdump
        echo "PATH=/usr/lib/llvm-14/bin:$PATH" >> $GITHUB_ENV

    - name: Clone and prepare kernel
      run: |
        git clone --depth=1 --branch master https://github.com/usama19931993/exynos990-kernel1.git kernel
        cd kernel
        
        # استخدام submodule بدلاً من clone مباشر
        git submodule add https://github.com/tiann/KernelSU.git drivers/kernelsu
        git submodule update --init --recursive
        
        # إصلاح MODULE_IMPORT_NS
        find drivers/kernelsu -name "*.c" -exec sed -i 's/^MODULE_IMPORT_NS/#MODULE_IMPORT_NS/g' {} +
        
        # تهيئة KernelSU
        echo 'obj-y += kernelsu/' >> drivers/Makefile
        echo 'source "drivers/kernelsu/Kconfig"' >> drivers/Kconfig
        mkdir -p out

    - name: Configure kernel
      run: |
        cd kernel
        make O=out ARCH=arm64 extreme_z3s_defconfig
        
        # تفعيل إعدادات KernelSU
        ./scripts/config --file out/.config \
          --enable CONFIG_KSU \
          --set-str CONFIG_KSU_GIT_VERSION $(git -C drivers/kernelsu rev-parse --short HEAD) \
          --set-val CONFIG_MALI_BIFROST y \
          --set-val CONFIG_MALI_BIFROST_R38P1 n \
          --set-val CONFIG_MALI_PLATFORM_NAME "exynos"
          
        make O=out ARCH=arm64 olddefconfig

    - name: Build kernel
      run: |
        cd kernel
        set -o pipefail
        make -j$(($(nproc)+1)) O=out ARCH=arm64 \
          CC=clang-14 \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE=aarch64-linux-gnu- \
          LD=ld.lld-14 \
          LLVM=1 \
          LLVM_IAS=1 \
          KCFLAGS="-Wno-error -march=armv8.2-a" 2>&1 | tee build.log
        
        [ -f "out/arch/arm64/boot/Image" ] || { echo "::error::Kernel Image not found!"; exit 1; }
        cp out/arch/arm64/boot/Image ../Image

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: kernel-image
        path: Image

    - name: Create release
      uses: softprops/action-gh-release@v1
      if: success()
      with:
        files: Image
        tag_name: kernel-$(date +%Y%m%d%H%M)
        body: |
          ✅ Kernel built successfully
          🔄 KernelSU version: $(git -C kernel/drivers/kernelsu rev-parse --short HEAD)
          📅 Build date: $(date)