
name: Build Complete Boot Image for SM-G988B (Exynos990)

on:
  workflow_dispatch:
    inputs:
      ksu_version:
        description: 'KernelSU version/branch'
        required: false
        default: 'main'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    env:
      KERNEL_DIR: kernel
      OUT_DIR: out
      BOOT_ORIGINAL_URL: "https://github.com/usama19931993/exynos990-kernel1/releases/download/boot-original/boot-original.zip"

    steps:
    - name: Checkout source
      uses: actions/checkout@v4

    - name: Clean workspace
      run: |
        rm -rf $KERNEL_DIR Image $OUT_DIR boot.img new-boot.img boot-original*
        mkdir -p $KERNEL_DIR/drivers

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y \
          bc bison build-essential clang-14 flex git libncurses-dev \
          libssl-dev lld-14 llvm-14 llvm-14-tools python3 unzip wget xz-utils \
          device-tree-compiler kmod libelf-dev ccache android-sdk-libsparse-utils

    - name: Setup environment
      run: |
        sudo ln -sf /usr/bin/llvm-ar-14 /usr/bin/llvm-ar
        sudo ln -sf /usr/bin/llvm-objdump-14 /usr/bin/llvm-objdump
        echo "PATH=/usr/lib/llvm-14/bin:$PATH" >> $GITHUB_ENV
        ccache --max-size=2G

    - name: Clone kernel source
      run: |
        git clone --depth=1 https://github.com/usama19931993/exynos990-kernel1.git $KERNEL_DIR

    - name: Clone and prepare KernelSU
      run: |
        cd $KERNEL_DIR
        
        # Remove existing kernelsu directory if exists
        [ -d "drivers/kernelsu" ] && rm -rf drivers/kernelsu || true
        
        # Clone KernelSU with retry logic
        for i in {1..3}; do
          git clone --depth=1 --branch ${{ inputs.ksu_version }} \
            https://github.com/tiann/KernelSU.git drivers/kernelsu && break || sleep 5
        done
        
        # Verify clone success
        [ -d "drivers/kernelsu" ] || { echo "::error::Failed to clone KernelSU after 3 attempts"; exit 1; }

        # Apply SELinux compatibility patches
        curl -sL https://patch-diff.githubusercontent.com/raw/tiann/KernelSU/pull/527.diff | git apply - || true

    - name: Configure KernelSU
      run: |
        cd $KERNEL_DIR
        echo 'obj-y += kernelsu/' >> drivers/Makefile
        echo 'source "drivers/kernelsu/Kconfig"' >> drivers/Kconfig
        KSU_VERSION=$(git -C drivers/kernelsu rev-parse --short HEAD)
        sed -i "s/#define KSU_GIT_VERSION.*/#define KSU_GIT_VERSION \"$KSU_VERSION\"/" drivers/kernelsu/ksu.h

    - name: Configure kernel
      run: |
        cd $KERNEL_DIR
        make O=$OUT_DIR ARCH=arm64 extreme_z3s_defconfig
        ./scripts/config --file $OUT_DIR/.config \
          --disable CONFIG_SECURITY_SELINUX_DEVELOP \
          --enable CONFIG_KSU \
          --set-val CONFIG_MALI_BIFROST y \
          --set-val CONFIG_MALI_BIFROST_R38P1 n \
          --set-val CONFIG_MALI_PLATFORM_NAME "exynos"
        make O=$OUT_DIR ARCH=arm64 olddefconfig

    - name: Build kernel
      run: |
        cd $KERNEL_DIR
        set -o pipefail
        make -j$(($(nproc)+1)) O=$OUT_DIR ARCH=arm64 \
          CC="ccache clang-14" \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE=aarch64-linux-gnu- \
          LD=ld.lld-14 \
          LLVM=1 \
          LLVM_IAS=1 \
          KCFLAGS="-Wno-error -march=armv8.2-a" 2>&1 | tee build.log
        [ -f "$OUT_DIR/arch/arm64/boot/Image" ] || { echo "::error::Kernel build failed"; exit 1; }

    - name: Download original boot.img
      run: |
        wget $BOOT_ORIGINAL_URL -O boot-original.zip
        unzip boot-original.zip

    - name: Setup magiskboot
      run: |
        wget https://github.com/topjohnwu/Magisk/releases/download/v27.0/magiskboot -O magiskboot
        chmod +x magiskboot

    - name: Repack boot.img
      run: |
        ./magiskboot unpack boot.img
        cp $KERNEL_DIR/$OUT_DIR/arch/arm64/boot/Image kernel
        ./magiskboot repack boot.img
        [ -f "new-boot.img" ] || { echo "::error::Repacking failed"; exit 1; }
        mv new-boot.img modified_boot.img
        tar -H ustar -cvf boot.tar.md5 modified_boot.img

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: boot-images
        path: |
          modified_boot.img
          boot.tar.md5
        retention-days: