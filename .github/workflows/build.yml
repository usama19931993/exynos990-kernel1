name: Build Kernel for SM-G988B (Exynos990)

on: workflow_dispatch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout source
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y bc bison build-essential curl flex git \
          libncurses-dev libssl-dev python3 unzip wget xz-utils clang-14 \
          lld-14 llvm-14 llvm-14-tools
        sudo ln -sf /usr/bin/llvm-ar-14 /usr/bin/llvm-ar
        sudo ln -sf /usr/bin/llvm-objdump-14 /usr/bin/llvm-objdump
        echo "PATH=/usr/lib/llvm-14/bin:$PATH" >> $GITHUB_ENV

    - name: Clone kernel and KernelSU
      run: |
        git clone --depth=1 https://github.com/usama19931993/exynos990-kernel1.git kernel
        cd kernel
        git clone --depth=1 https://github.com/tiann/KernelSU.git
        mv KernelSU/kernel drivers/kernelsu
        echo 'source "drivers/kernelsu/Kconfig"' >> drivers/Kconfig
        mkdir -p out

    - name: Configure kernel
      run: |
        cd kernel
        make O=out ARCH=arm64 extreme_z3s_defconfig
        ./scripts/config --file out/.config \
          --set-val CONFIG_MALI_BIFROST y \
          --set-val CONFIG_MALI_BIFROST_R38P1 n \
          --set-val CONFIG_MALI_PLATFORM_NAME "exynos"
        make O=out ARCH=arm64 olddefconfig

    - name: Build kernel
      run: |
        cd kernel
        make -j$(nproc) O=out ARCH=arm64 \
          CC=clang-14 \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE=aarch64-linux-gnu- \
          LD=ld.lld-14 \
          LLVM=1 \
          LLVM_IAS=1 \
          KCFLAGS="-Wno-error -march=armv8.2-a"

    - name: Download original boot
      run: |
        mkdir original
        cd original
        curl -L -o boot-original.zip \
          https://github.com/usama19931993/exynos990-kernel1/releases/download/boot-original/boot-original.zip
        unzip boot-original.zip

    - name: Package boot.img + custom kernel
      run: |
        cd kernel
        bash ./mkbootimg.sh
        cp boot.img ../original/custom-boot.img

    - name: Generate flashable boot.tar.md5
      run: |
        cd original
        # استخدم boot.img أي الأصلي أو custom-boot.img حسب mkbootimg.sh
        tar -cvf boot.tar boot.img custom-boot.img
        md5sum boot.tar >> boot.tar
        mv boot.tar boot.tar.md5

    - name: Upload boot.tar.md5 artifact
      uses: actions/upload-artifact@v4
      with:
        name: flashable-boot
        path: original/boot.tar.md5