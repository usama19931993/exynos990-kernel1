name: Build Kernel for SM-G988B (Exynos990)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout your kernel repo
      uses: actions/checkout@v4

    - name: Clean workspace
      run: rm -rf kernel

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y \
          bc bison build-essential flex git \
          libncurses-dev libssl-dev \
          clang-14 lld-14 llvm-14 llvm-14-tools \
          python3 unzip wget xz-utils
        sudo ln -sf /usr/bin/llvm-ar-14 /usr/bin/llvm-ar
        sudo ln -sf /usr/bin/llvm-objdump-14 /usr/bin/llvm-objdump
        echo "PATH=/usr/lib/llvm-14/bin:$PATH" >> $GITHUB_ENV

    - name: Clone Kernel source
      run: |
        git clone --depth=1 https://github.com/usama19931993/exynos990-kernel1.git kernel

    - name: Add KernelSU source
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        cd kernel
        git clone --depth=1 https://${GH_TOKEN}@github.com/KernelSU/KernelSU.git kernelSU
        mkdir -p drivers/kernelsu
        cp -r kernelSU/kernel/* drivers/kernelsu/
        echo 'obj-y += kernelsu/' >> drivers/Makefile
        echo 'source "drivers/kernelsu/Kconfig"' >> drivers/Kconfig
        mkdir -p out

    - name: Configure kernel
      run: |
        cd kernel
        make O=out ARCH=arm64 extreme_z3s_defconfig
        ./scripts/config --file out/.config \
          --set-val CONFIG_MALI_BIFROST y \
          --set-val CONFIG_MALI_BIFROST_R38P1 n \
          --set-val CONFIG_MALI_PLATFORM_NAME "exynos"
        make O=out ARCH=arm64 olddefconfig

    - name: Build kernel
      run: |
        cd kernel
        make -j$(nproc) O=out ARCH=arm64 \
          CC=clang-14 \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE=aarch64-linux-gnu- \
          LD=ld.lld-14 \
          LLVM=1 \
          LLVM_IAS=1 \
          KCFLAGS="-Wno-error -march=armv8.2-a"

    - name: Generate boot image (optional)
      run: |
        cd kernel
        mkdir -p tools
        wget https://android.googlesource.com/platform/system/tools/mkbootimg/+/refs/heads/master/mkbootimg.py?format=TEXT -O tools/mkbootimg.b64
        base64 -d tools/mkbootimg.b64 > tools/mkbootimg.py
        chmod +x tools/mkbootimg.py

        export BASE_ADDR=0x10000000
        export PAGE_SIZE=2048
        export KERNEL_IMG="out/arch/arm64/boot/Image"

        python3 tools/mkbootimg.py \
          --kernel $KERNEL_IMG \
          --base $BASE_ADDR \
          --pagesize $PAGE_SIZE \
          --output boot.img || true

        ls -lh boot.img || true
        tar -cvf boot.tar.md5 boot.img || true