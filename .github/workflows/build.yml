name: Build Kernel for SM-G988B (Exynos990)

on:
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Enable debug output'
        required: false
        default: 'false'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Clean workspace
        run: |
          rm -rf kernel out Image build.log
          mkdir -p kernel

      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
            bc bison build-essential clang-14 flex git libncurses-dev \
            libssl-dev lld-14 llvm-14 llvm-14-tools python3 unzip wget xz-utils \
            libelf-dev dwarves
          sudo ln -sf /usr/bin/llvm-ar-14 /usr/bin/llvm-ar
          sudo ln -sf /usr/bin/llvm-objdump-14 /usr/bin/llvm-objdump
          sudo ln -sf /usr/bin/ld.lld-14 /usr/bin/ld.lld
          echo "PATH=/usr/lib/llvm-14/bin:$PATH" >> $GITHUB_ENV

      - name: Clone kernel source
        run: |
          git clone --depth=1 --branch master https://github.com/usama19931993/exynos990-kernel1.git kernel
          cd kernel
          git submodule update --init --recursive

      - name: Integrate KernelSU
        run: |
          cd kernel
          git clone --depth=1 https://github.com/tiann/KernelSU.git kernelSU
          rm -rf kernelSU/.git
          mkdir -p drivers/kernelsu
          cp -r kernelSU/kernel/* drivers/kernelsu/
          echo 'obj-y += kernelsu/' >> drivers/Makefile
          echo 'source "drivers/kernelsu/Kconfig"' >> drivers/Kconfig

      - name: Configure kernel
        run: |
          cd kernel
          make O=out ARCH=arm64 extreme_z3s_defconfig
          ./scripts/config --file out/.config \
            --enable CONFIG_MALI_BIFROST \
            --disable CONFIG_MALI_BIFROST_R38P1 \
            --disable CONFIG_MALI_BIFROST_R38P1_DEBUG \
            --set-str CONFIG_MALI_PLATFORM_NAME "exynos" \
            --set-str CONFIG_MALI_BIFROST_VERSION "r38p0"
          make O=out ARCH=arm64 olddefconfig

      - name: Build kernel
        run: |
          cd kernel
          set -o pipefail
          make -j$(($(nproc) + 1)) O=out ARCH=arm64 \
            CC=clang \
            CLANG_TRIPLE=aarch64-linux-gnu- \
            CROSS_COMPILE=aarch64-linux-gnu- \
            LD=ld.lld \
            LLVM=1 \
            LLVM_IAS=1 \
            KCFLAGS="-Wno-error -march=armv8.2-a" \
            V=1 \
            2>&1 | tee ../build.log || (grep -i error ../build.log -A10 -B5 && exit 1)

      - name: Verify build output
        run: |
          if [ -f kernel/out/arch/arm64/boot/Image ]; then
            echo "✅ Kernel image found"
            ls -lh kernel/out/arch/arm64/boot/Image
          else
            echo "❌ Kernel image not found! Possible errors:"
            grep -i error build.log -A5 -B5 || true
            find kernel/out -name "*.o" -type f -size -1k -ls
            exit 1
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-build-${{ github.run_number }}
          path: |
            kernel/out/arch/arm64/boot/Image
            build.log