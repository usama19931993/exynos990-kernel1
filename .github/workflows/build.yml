name: Build Kernel for SM-G988B (Exynos990)

on:
  workflow_dispatch:
    inputs:
      debug_build:
        description: 'Enable debug mode'
        required: false
        default: 'false'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Clean workspace
        run: |
          rm -rf kernel out Image build.log output-files.txt
          mkdir -p kernel

      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
            bc bison build-essential clang-14 flex git libncurses-dev \
            libssl-dev lld-14 llvm-14 llvm-14-tools python3 unzip wget xz-utils
          sudo ln -sf /usr/bin/llvm-ar-14 /usr/bin/llvm-ar
          sudo ln -sf /usr/bin/llvm-objdump-14 /usr/bin/llvm-objdump
          sudo ln -sf /usr/bin/ld.lld-14 /usr/bin/ld.lld
          echo "PATH=/usr/lib/llvm-14/bin:$PATH" >> $GITHUB_ENV

      - name: Clone kernel source
        run: |
          git clone --depth=1 https://github.com/usama19931993/exynos990-kernel1.git kernel
          cd kernel
          git clone --depth=1 https://github.com/tiann/KernelSU.git kernelSU
          rm -rf kernelSU/.git

      - name: Integrate KernelSU
        run: |
          cd kernel
          mkdir -p drivers/kernelsu
          cp -r kernelSU/kernel/* drivers/kernelsu/
          echo 'obj-y += kernelsu/' >> drivers/Makefile
          echo 'source "drivers/kernelsu/Kconfig"' >> drivers/Kconfig
          mkdir -p out

      - name: Configure kernel
        run: |
          cd kernel
          make O=out ARCH=arm64 extreme_z3s_defconfig
          yes "" | make O=out ARCH=arm64 olddefconfig
          ./scripts/config --file out/.config \
            --enable CONFIG_MALI_BIFROST \
            --disable CONFIG_MALI_BIFROST_R38P1 \
            --set-str CONFIG_MALI_PLATFORM_NAME "exynos"
          make O=out ARCH=arm64 olddefconfig

      - name: Build kernel
        run: |
          cd kernel
          set -o pipefail
          make -j$(nproc) O=out ARCH=arm64 \
            CC=clang \
            CLANG_TRIPLE=aarch64-linux-gnu- \
            CROSS_COMPILE=aarch64-linux-gnu- \
            LD=ld.lld \
            LLVM=1 \
            LLVM_IAS=1 \
            KCFLAGS="-Wno-error -march=armv8.2-a" \
            V=1 \
            2>&1 | tee ../build.log || (echo "❌ Build failed. Showing last 200 lines:" && tail -n 200 ../build.log && exit 1)

      - name: Verify build output
        run: |
          if [ -f kernel/out/arch/arm64/boot/Image ]; then
            echo "✅ Build successful - Kernel image found"
            ls -lh kernel/out/arch/arm64/boot/Image
          else
            echo "❌ Build failed - Kernel image not found"
            find kernel/out -type f -name "Image*" -ls
            exit 1
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: kernel-image
          path: kernel/out/arch/arm64/boot/Image

      - name: Create release
        uses: softprops/action-gh-release@v2
        if: success()
        with:
          files: kernel/out/arch/arm64/boot/Image
          tag_name: kernel-$(date +%Y%m%d%H%M)
          name: "Kernel Build $(date +'%Y-%m-%d %H:%M')"
          body: |
            ### Kernel Build Successful
            - Device: SM-G988B (Exynos990)
            - Date: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
            - KernelSU: Integrated
            - Build Log: [download](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}