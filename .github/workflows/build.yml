name: Build Custom Kernel for SM-G988B (Exynos990) with KernelSU

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # 1. تفريغ العمل الحالي (لو الملف موجود)
    - name: Clean workspace
      run: rm -rf kernel boot-original boot-original.zip

    # 2. تحميل الريبو الأساسي
    - name: Checkout this repo
      uses: actions/checkout@v4

    # 3. تثبيت الأدوات اللازمة للبناء
    - name: Install toolchain
      run: |
        sudo apt update
        sudo apt install -y \
          bc \
          bison \
          build-essential \
          clang-14 \
          flex \
          git \
          libncurses-dev \
          libssl-dev \
          lld-14 \
          llvm-14 \
          llvm-14-tools \
          python3 \
          unzip \
          wget \
          xz-utils
        sudo ln -sf /usr/bin/llvm-ar-14 /usr/bin/llvm-ar
        sudo ln -sf /usr/bin/llvm-objdump-14 /usr/bin/llvm-objdump
        echo "PATH=/usr/lib/llvm-14/bin:$PATH" >> $GITHUB_ENV

    # 4. سحب الكيرنل الأصلي من الريليس
    - name: Download boot-original.zip from GitHub Release
      run: |
        curl -L -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
          -o boot-original.zip \
          https://github.com/usama19931993/exynos990-kernel1/releases/download/boot-original/boot-original.zip
        unzip boot-original.zip -d boot-original

    # 5. نسخ boot.img إلى مجلد الكيرنل
    - name: Clone and prepare kernel source
      run: |
        git clone --depth=1 https://github.com/usama19931993/exynos990-kernel1.git kernel
        cd kernel
        git clone --depth=1 https://github.com/tiann/KernelSU.git
        mv KernelSU/kernel drivers/kernelsu
        echo 'source "drivers/kernelsu/Kconfig"' >> drivers/Kconfig
        cp ../boot-original/boot.img .
        mkdir -p out

    # 6. إعداد ملفات الكونفيغ + تفعيل إعدادات GPU + KernelSU
    - name: Configure kernel
      run: |
        cd kernel
        make O=out ARCH=arm64 extreme_z3s_defconfig
        ./scripts/config --file out/.config \
          --set-val CONFIG_MALI_BIFROST y \
          --set-val CONFIG_MALI_BIFROST_R38P1 n \
          --set-val CONFIG_MALI_PLATFORM_NAME "exynos"
        make O=out ARCH=arm64 olddefconfig

    # 7. بناء الكيرنل باستخدام LLVM
    - name: Build kernel
      run: |
        cd kernel
        make -j$(nproc) O=out ARCH=arm64 \
          CC=clang-14 \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE=aarch64-linux-gnu- \
          LD=ld.lld-14 \
          LLVM=1 \
          LLVM_IAS=1 \
          KCFLAGS="-Wno-error -march=armv8.2-a"

    # 8. دمج الكيرنل مع boot.img الأصلي وتوليد boot.img جديد
    - name: Patch boot.img with built kernel
      run: |
        cd kernel
        bash ./mkbootimg.sh

    # 9. توليد boot.tar.md5 من boot.img (للفلاش عبر Odin)
    - name: Create boot.tar.md5
      run: |
        cd kernel
        tar -H ustar -c boot.img > boot.tar
        md5sum -t boot.tar >> boot.tar
        mv boot.tar boot.tar.md5

    # 10. رفع الناتج إلى صفحة الريليس أو كآرتيفاكت
    - name: Upload boot.tar.md5 artifact
      uses: actions/upload-artifact@v4
      with:
        name: boot-for-odin
        path: kernel/boot.tar.md5