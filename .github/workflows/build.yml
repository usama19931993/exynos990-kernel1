name: Build Kernel for SM-G988B (Exynos990)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Clean workspace
        run: rm -rf kernel out Image build.log

      - name: Install dependencies
        run: |
          sudo apt update -y
          sudo apt install -y \
            bc bison build-essential clang-14 flex git libncurses-dev \
            libssl-dev lld-14 llvm-14 llvm-14-tools python3 unzip wget xz-utils

      - name: Clone kernel source (smart branch detection)
        run: |
          git clone --depth=1 https://github.com/usama19931993/exynos990-kernel1.git kernel
          cd kernel
          # محاولة الفرع الرئيسي بأسماء مختلفة
          BRANCH=$(git branch -a | grep -E 'main|master|release' | head -1 | sed 's#remotes/origin/##' | tr -d ' ')
          [ -z "$BRANCH" ] && BRANCH=$(git describe --tags $(git rev-list --tags --max-count=1))
          git checkout $BRANCH
          echo "Using branch: $BRANCH"
          git submodule update --init --recursive

      - name: Integrate KernelSU
        run: |
          cd kernel
          git clone --depth=1 https://github.com/tiann/KernelSU.git kernelSU
          rm -rf kernelSU/.git
          mkdir -p drivers/kernelsu
          cp -r kernelSU/kernel/* drivers/kernelsu/
          echo 'obj-y += kernelsu/' >> drivers/Makefile
          echo 'source "drivers/kernelsu/Kconfig"' >> drivers/Kconfig
          mkdir -p out

      - name: Configure kernel
        run: |
          cd kernel
          make O=out ARCH=arm64 extreme_z3s_defconfig
          yes "" | make O=out ARCH=arm64 olddefconfig
          ./scripts/config --file out/.config \
            --enable CONFIG_MALI_BIFROST \
            --disable CONFIG_MALI_BIFROST_R38P1 \
            --set-str CONFIG_MALI_PLATFORM_NAME "exynos"
          make O=out ARCH=arm64 olddefconfig

      - name: Build kernel
        run: |
          cd kernel
          set -o pipefail
          make -j$(nproc) O=out ARCH=arm64 \
            CC=clang-14 \
            CLANG_TRIPLE=aarch64-linux-gnu- \
            CROSS_COMPILE=aarch64-linux-gnu- \
            LD=ld.lld-14 \
            LLVM=1 \
            LLVM_IAS=1 \
            KCFLAGS="-Wno-error -march=armv8.2-a" \
            V=1 \
            2>&1 | tee ../build.log || (echo "❌ Build failed. Showing errors:" && grep -i error ../build.log -A5 -B5 && exit 1)

      - name: Verify build
        run: |
          if [ -f kernel/out/arch/arm64/boot/Image ]; then
            echo "✅ Build successful"
            ls -lh kernel/out/arch/arm64/boot/Image
          else
            echo "❌ Build failed - Image not found"
            exit 1
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-image
          path: kernel/out/arch/arm64/boot/Image