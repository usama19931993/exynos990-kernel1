name: Build Complete Boot Image for SM-G988B (Exynos990)

on:
  workflow_dispatch:
    inputs:
      ksu_version:
        description: 'KernelSU version/tag (e.g. v0.6.6)'
        required: false
        default: 'v0.6.6'  # استخدام إصدار أحدث معروف

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    env:
      KERNEL_DIR: kernel
      OUT_DIR: out
      BOOT_ORIGINAL_URL: "https://github.com/usama19931993/exynos990-kernel1/releases/download/boot-original/boot-original.zip"

    steps:
    - name: Checkout source
      uses: actions/checkout@v4

    - name: Clean workspace
      run: |
        rm -rf $KERNEL_DIR Image $OUT_DIR boot.img new-boot.img boot-original*
        mkdir -p $KERNEL_DIR/drivers

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y \
          bc bison build-essential clang-14 flex git libncurses-dev \
          libssl-dev lld-14 llvm-14 llvm-14-tools python3 unzip wget xz-utils \
          device-tree-compiler kmod libelf-dev ccache android-sdk-libsparse-utils

    - name: Clone kernel source
      run: |
        git clone --depth=1 https://github.com/usama19931993/exynos990-kernel1.git $KERNEL_DIR

    - name: Setup KernelSU
      run: |
        cd $KERNEL_DIR
        
        # إزالة أي نسخة موجودة مسبقاً
        [ -d "kernelSU" ] && rm -rf kernelSU || true
        [ -d "drivers/kernelsu" ] && rm -rf drivers/kernelsu || true
        
        # استنساخ KernelSU مع التحقق من الإصدار
        git clone --depth=1 https://github.com/tiann/KernelSU.git kernelSU
        
        # الانتقال إلى الإصدار المحدد
        cd kernelSU
        git fetch --tags
        if ! git checkout tags/${{ inputs.ksu_version }}; then
          echo "::error::Failed to checkout KernelSU version ${{ inputs.ksu_version }}"
          echo "Available versions:"
          git tag -l | sort -V | tail -n 10
          exit 1
        fi
        cd ..
        
        # نسخ ملفات KernelSU
        mkdir -p drivers/kernelsu
        cp -r kernelSU/kernel/* drivers/kernelsu/
        
        # إعداد تكوين KernelSU
        echo 'obj-y += kernelsu/' >> drivers/Makefile
        echo 'source "drivers/kernelsu/Kconfig"' >> drivers/Kconfig
        
        # تنظيف ملفات git غير الضرورية
        rm -rf kernelSU/.git kernelSU

    - name: Apply KernelSU patches
      run: |
        cd $KERNEL_DIR/drivers/kernelsu
        
        # إصلاح مشاكل شائعة
        sed -i '/MODULE_IMPORT_NS(VFS_internal_I_am_really_a_filesystem_and_am_NOT_a_driver)/d' ksu.c
        
        # تحديث إصدار git
        KSU_VERSION=${{ inputs.ksu_version }}
        sed -i "s/#define KSU_GIT_VERSION.*/#define KSU_GIT_VERSION \"$KSU_VERSION\"/" ksu.h

    - name: Configure kernel
      run: |
        cd $KERNEL_DIR
        make O=$OUT_DIR ARCH=arm64 extreme_z3s_defconfig
        ./scripts/config --file $OUT_DIR/.config \
          --enable CONFIG_KSU \
          --set-val CONFIG_MALI_BIFROST y \
          --set-val CONFIG_MALI_BIFROST_R38P1 n \
          --set-val CONFIG_MALI_PLATFORM_NAME "exynos"
        make O=$OUT_DIR ARCH=arm64 olddefconfig

    - name: Build kernel
      run: |
        cd $KERNEL_DIR
        set -o pipefail
        make -j$(($(nproc)+1)) O=$OUT_DIR ARCH=arm64 \
          CC="ccache clang-14" \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE=aarch64-linux-gnu- \
          LD=ld.lld-14 \
          LLVM=1 \
          LLVM_IAS=1 \
          KCFLAGS="-Wno-error -march=armv8.2-a" 2>&1 | tee build.log
        [ -f "$OUT_DIR/arch/arm64/boot/Image" ] || { echo "::error::Kernel build failed"; exit 1; }

    - name: Package boot image
      run: |
        wget $BOOT_ORIGINAL_URL -O boot-original.zip
        unzip boot-original.zip
        
        wget https://github.com/topjohnwu/Magisk/releases/download/v27.0/magiskboot -O magiskboot
        chmod +x magiskboot
        
        ./magiskboot unpack boot.img
        cp $KERNEL_DIR/$OUT_DIR/arch/arm64/boot/Image kernel
        ./magiskboot repack boot.img
        mv new-boot.img modified_boot.img
        tar -H ustar -cvf boot.tar.md5 modified_boot.img

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: boot-images
        path: |
          modified_boot.img
          boot.tar.md5
        retention-days: 3

    - name: Create release
      if: success()
      uses: softprops/action-gh-release@v2
      with:
        files: |
          modified_boot.img
          boot.tar.md5
        tag_name: boot-${{ github.run_number }}
        body: |
          ### Kernel Build Summary
          - **Device**: SM-G988B (Exynos990)
          - **KernelSU Version**: ${{ inputs.ksu_version }}
          - **Build Date**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
          
          ### Flash Instructions
          1. **Odin**: Use `boot.tar.md5` in AP slot
          2. **Fastboot**: 
          ```bash
          fastboot flash boot modified_boot.img
          ```