name: Build Kernel for SM-G988B (Exynos990)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
    - name: سحب ملفات المشروع
      uses: actions/checkout@v4

    - name: تثبيت المتطلبات 
      run: |
        sudo apt update
        sudo apt install -y bc bison build-essential ccache curl flex git libncurses-dev libssl-dev python3 unzip wget xz-utils

    - name: تنظيف البيئة
      run: |
        rm -rf kernel toolchain

    - name: استنساخ مصدر النواة
      run: |
        git clone --depth=1 --branch main https://github.com/usama19931993/exynos990-kernel1.git kernel
        cd kernel
        echo "📂 الملفات المتاحة في arch/arm64/configs/:"
        ls arch/arm64/configs/

    - name: إعداد KernelSU
      run: |
        cd kernel
        git submodule add https://github.com/tiann/KernelSU.git drivers/kernelsu
        cd drivers/kernelsu && git submodule update --init && cd ../..
        echo 'source "drivers/kernelsu/Kconfig"' >> drivers/Kconfig

    - name: إعداد أداة التجميع
      run: |
        git clone --depth=1 https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9.git toolchain
        echo "$PWD/toolchain/bin" >> $GITHUB_PATH
        echo "CROSS_COMPILE=$PWD/toolchain/bin/aarch64-linux-android-" >> $GITHUB_ENV

    - name: بناء النواة
      run: |
        cd kernel
        make O=out ARCH=arm64 clean
        make O=out ARCH=arm64 mrproper
        
        # استخدام stock_defconfig مع تعديلات KernelSU
        cp arch/arm64/configs/stock_defconfig arch/arm64/configs/g988_temp_defconfig
        echo "CONFIG_KSU=y" >> arch/arm64/configs/g988_temp_defconfig
        echo "CONFIG_KSU_DEBUG=y" >> arch/arm64/configs/g988_temp_defconfig
        
        make O=out ARCH=arm64 g988_temp_defconfig
        make -j$(($(nproc)*2)) O=out ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- CC="ccache aarch64-linux-android-gcc" 2>&1 | tee build.log

    - name: إنشاء صورة Boot
      run: |
        cd kernel
        if [ ! -f "mkbootimg.sh" ]; then
          echo "📦 إنشاء mkbootimg.sh تلقائياً..."
          cat > mkbootimg.sh <<EOL
#!/bin/bash
./tools/mkbootimg \
  --kernel out/arch/arm64/boot/Image \
  --ramdisk out/ramdisk.cpio \
  --cmdline "console=ttyS0,115200n8" \
  --base 0x10000000 \
  --pagesize 2048 \
  --os_version 11.0.0 \
  --os_patch_level 2025-07 \
  -o boot.img
EOL
          chmod +x mkbootimg.sh
        fi
        bash ./mkbootimg.sh
        tar -cvf boot.tar.md5 boot.img

    - name: رفع المخرجات
      uses: actions/upload-artifact@v4
      with:
        name: kernel-build-$(date +%s)
        path: |
          kernel/boot.tar.md5
          kernel/build.log
          kernel/out/.config