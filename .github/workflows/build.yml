name: Build Kernel for SM-G988B (Exynos990)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      GH_USERNAME: ${{ secrets.GH_USERNAME }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Clean workspace
      run: rm -rf kernel

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y \
          bc \
          bison \
          build-essential \
          clang-14 \
          flex \
          git \
          libncurses-dev \
          libssl-dev \
          lld-14 \
          llvm-14 \
          llvm-14-tools \
          python3 \
          unzip \
          wget \
          xz-utils
        sudo ln -sf /usr/bin/llvm-ar-14 /usr/bin/llvm-ar
        sudo ln -sf /usr/bin/llvm-objdump-14 /usr/bin/llvm-objdump
        echo "PATH=/usr/lib/llvm-14/bin:$PATH" >> $GITHUB_ENV

    - name: Clone and prepare kernel
      run: |
        git clone --depth=1 https://github.com/usama19931993/exynos990-kernel1.git kernel
        cd kernel
        git clone --depth=1 https://github.com/KernelSU/KernelSU kernelSU
        rm -rf kernelSU/.git
        cp -rvf kernelSU/* .
        mkdir -p drivers/kernelsu
        cp -r kernelSU/kernel/* drivers/kernelsu/
        echo 'obj-y += kernelsu/' >> drivers/Makefile
        echo 'source "drivers/kernelsu/Kconfig"' >> drivers/Kconfig
        mkdir -p out

    - name: Configure kernel
      run: |
        cd kernel
        make O=out ARCH=arm64 extreme_z3s_defconfig
        ./scripts/config --file out/.config \
          --set-val CONFIG_MALI_BIFROST y \
          --set-val CONFIG_MALI_BIFROST_R38P1 n \
          --set-val CONFIG_MALI_PLATFORM_NAME "exynos"
        make O=out ARCH=arm64 olddefconfig

    - name: Build kernel
      run: |
        cd kernel
        make -j$(nproc) O=out ARCH=arm64 \
          CC=clang-14 \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE=aarch64-linux-gnu- \
          LD=ld.lld-14 \
          LLVM=1 \
          LLVM_IAS=1 \
          KCFLAGS="-Wno-error -march=armv8.2-a"

    - name: Use original boot.img and repack
      run: |
        cd kernel
        mkdir tools
        wget https://android.googlesource.com/platform/system/tools/mkbootimg/+/refs/heads/master/mkbootimg.py?format=TEXT -O tools/mkbootimg.b64
        base64 -d tools/mkbootimg.b64 > tools/mkbootimg.py
        chmod +x tools/mkbootimg.py

        # استخراج boot.img من ملف رفعته مسبقًا
        cp $GITHUB_WORKSPACE/boot.img boot.img

        export BASE_ADDR=0x10000000
        export PAGE_SIZE=2048
        export KERNEL_IMG="out/arch/arm64/boot/Image"

        python3 tools/mkbootimg.py \
          --kernel $KERNEL_IMG \
          --base $BASE_ADDR \
          --pagesize $PAGE_SIZE \
          --output boot.img

        tar -cvf boot.tar.md5 boot.img

    - name: Upload release
      run: |
        cd kernel
        RELEASE_TAG="kernel-$(date +%Y%m%d-%H%M)"
        curl -s -X POST https://api.github.com/repos/${GH_USERNAME}/exynos990-kernel1/releases \
          -H "Authorization: token ${GH_TOKEN}" \
          -H "Content-Type: application/json" \
          -d "{\"tag_name\": \"${RELEASE_TAG}\", \"name\": \"${RELEASE_TAG}\", \"body\": \"Automated Kernel Build\", \"draft\": false, \"prerelease\": false}"
        
        UPLOAD_URL=$(curl -s https://api.github.com/repos/${GH_USERNAME}/exynos990-kernel1/releases/tags/${RELEASE_TAG} | jq -r '.upload_url' | sed -e "s/{?name,label}//")
        
        curl -s -X POST "$UPLOAD_URL?name=boot.tar.md5" \
          -H "Authorization: token ${GH_TOKEN}" \
          -H "Content-Type: application/octet-stream" \
          --data-binary "@boot.tar.md5"