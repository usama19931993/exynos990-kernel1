name: Build Custom Kernel

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Kernel Source
      uses: actions/checkout@v3

    - name: Set up environment
      run: |
        sudo apt update
        sudo apt install -y bc bison flex libssl-dev libncurses5-dev \
            libncursesw5-dev clang llvm lld build-essential git curl wget python3 unzip tar
        
    - name: Clone KernelSU
      run: |
        git clone --depth=1 https://github.com/KernelSU/KernelSU.git ksu
        mv ksu/kernel/* ./

    - name: Download original boot image
      run: |
        mkdir -p boot-original
        wget --header="Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
             -O boot-original/boot.zip \
             https://github.com/usama19931993/exynos990-kernel1/releases/download/boot-original/boot-original.zip
        unzip -o boot-original/boot.zip -d boot-original
        cp boot-original/boot.img kernel/

    - name: Build Kernel
      run: |
        export ARCH=arm64
        export SUBARCH=arm64
        export CROSS_COMPILE=aarch64-linux-gnu-
        export LOCALVERSION=-custom
        make -C kernel O=out exynos990_defconfig
        make -C kernel O=out -j$(nproc)

    - name: Create patched boot.img using AnyKernel3
      run: |
        git clone https://github.com/osm0sis/AnyKernel3.git
        cp out/arch/arm64/boot/Image AnyKernel3/
        cd AnyKernel3
        zip -r9 ../kernel-patched.zip .

    - name: Extract boot.img from zip
      run: |
        unzip -o kernel-patched.zip -d patched
        mv patched/boot.img .

    - name: Create boot.tar.md5 for Odin
      run: |
        tar -H ustar -c boot.img > boot.tar
        md5sum -t boot.tar | awk '{print $1}' >> boot.tar
        mv boot.tar boot.tar.md5

    - name: Upload boot.tar.md5
      uses: actions/upload-artifact@v3
      with:
        name: boot.tar.md5
        path: boot.tar.md5