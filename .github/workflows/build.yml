name: Build Kernel Image for SM-G988B (Exynos990)

on:
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debug mode'
        required: false
        default: 'false'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    env:
      KERNEL_DIR: kernel
      OUT_DIR: out

    steps:
    - name: Checkout source
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-depth: 1

    - name: Setup environment
      run: |
        sudo apt update
        sudo apt install -y \
          bc bison build-essential clang-14 flex git libncurses-dev \
          libssl-dev lld-14 llvm-14 llvm-14-tools python3 unzip wget xz-utils \
          device-tree-compiler kmod libelf-dev ccache

        sudo ln -sf /usr/bin/llvm-ar-14 /usr/bin/llvm-ar
        sudo ln -sf /usr/bin/llvm-objdump-14 /usr/bin/llvm-objdump
        echo "PATH=/usr/lib/llvm-14/bin:$PATH" >> $GITHUB_ENV
        echo "CCACHE_DIR=$GITHUB_WORKSPACE/.ccache" >> $GITHUB_ENV
        ccache --max-size=2G

    - name: Prepare KernelSU
      run: |
        cd $KERNEL_DIR
        
        # حل بديل إذا فشل submodule
        if [ ! -d "drivers/kernelsu" ]; then
          git clone https://github.com/tiann/KernelSU.git drivers/kernelsu
          git -C drivers/kernelsu checkout main
        fi

        # إصلاحات KernelSU
        find drivers/kernelsu -name "*.c" -exec sed -i 's/^MODULE_IMPORT_NS/#MODULE_IMPORT_NS/g' {} +
        
        echo 'obj-y += kernelsu/' >> drivers/Makefile
        echo 'source "drivers/kernelsu/Kconfig"' >> drivers/Kconfig

    - name: Configure kernel
      run: |
        cd $KERNEL_DIR
        make O=$OUT_DIR ARCH=arm64 extreme_z3s_defconfig
        
        ./scripts/config --file $OUT_DIR/.config \
          --enable CONFIG_KSU \
          --set-str CONFIG_KSU_GIT_VERSION $(git -C drivers/kernelsu rev-parse --short HEAD) \
          --set-val CONFIG_MALI_BIFROST y \
          --set-val CONFIG_MALI_BIFROST_R38P1 n \
          --set-val CONFIG_MALI_PLATFORM_NAME "exynos"
          
        make O=$OUT_DIR ARCH=arm64 olddefconfig

    - name: Build kernel (with ccache)
      run: |
        cd $KERNEL_DIR
        set -o pipefail
        make -j$(($(nproc)+1)) O=$OUT_DIR ARCH=arm64 \
          CC="ccache clang-14" \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE=aarch64-linux-gnu- \
          LD=ld.lld-14 \
          LLVM=1 \
          LLVM_IAS=1 \
          KCFLAGS="-Wno-error -march=armv8.2-a" 2>&1 | tee build.log
        
        if [ ! -f "$OUT_DIR/arch/arm64/boot/Image" ]; then
          echo "::error::Kernel Image not found!"
          tail -n 100 build.log
          exit 1
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4  # الإصدار الجديد
      with:
        name: kernel-artifacts
        path: |
          ${{ env.KERNEL_DIR }}/${{ env.OUT_DIR }}/arch/arm64/boot/Image
          ${{ env.KERNEL_DIR }}/build.log
        retention-days: 3

    - name: Create release
      if: success()
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ env.KERNEL_DIR }}/${{ env.OUT_DIR }}/arch/arm64/boot/Image
        tag_name: kernel-$(date +%Y%m%d)
        body: |
          ### Kernel Build Summary
          - **Target Device**: SM-G988B (Exynos990)
          - **KernelSU Version**: $(git -C ${{ env.KERNEL_DIR }}/drivers/kernelsu rev-parse --short HEAD)
          - **Build Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **Build Log**: [Download Here](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})